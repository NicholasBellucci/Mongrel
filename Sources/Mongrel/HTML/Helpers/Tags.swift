/// Represents the HTML ``<abbr>`` tag.
public let Abbreviation = Node(name: "abbr")
/// Represents the HTML ``<address>`` tag.
public let Address = Node(name: "address")
/// Represents the HTML ``<a>`` tag.
public let Anchor = Node(name: "a")
/// Represents the HTML ``<area>`` tag.
public let Area = Node(name: "area", isEmpty: true)
/// Represents the HTML ``<article>`` tag.
public let Article = Node(name: "article")
/// Represents the HTML ``<aside>`` tag.
public let Aside = Node(name: "aside")
/// Represents the HTML ``<audio>`` tag.
public let Audio = Node(name: "audio")
/// Represents the HTML ``<base>`` tag.
public let Base = Node(name: "base", isEmpty: true)
/// Represents the HTML ``<bdi>`` tag.
public let BidirectionalIsolate = Node(name: "bdi")
/// Represents the HTML ``<bdo>`` tag.
public let BidirectionalTextOverride  = Node(name: "bdo")
/// Represents the HTML ``<blockquote>`` tag.
public let BlockQuotation = Node(name: "blockquote")
/// Represents the HTML ``<body>`` tag.
public let Body = Node(name: "body")
/// Represents the HTML ``<br>`` tag.
public let Break = Node(name: "br", isEmpty: true)
/// Represents the HTML ``<b>`` tag.
public let BringAttentionTo = Node(name: "b")
/// Represents the HTML ``<button>`` tag.
public let Button = Node(name: "button")
/// Represents the HTML ``<canvas>`` tag.
public let Canvas = Node(name: "canvas")
/// Represents the HTML ``<caption>`` tag.
public let Caption = Node(name: "caption")
/// Represents the HTML ``<cite>`` tag.
public let Citation = Node(name: "cite")
/// Represents the HTML ``<col>`` tag.
public let Column = Node(name: "col", isEmpty: true)
/// Represents the HTML ``<colgroup>`` tag.
public let ColumnGroup = Node(name: "colgroup")
/// Represents the HTML ``<data>`` tag.
public let Data = Node(name: "data")
/// Represents the HTML ``<datalist>`` tag.
public let DataList = Node(name: "datalist")
/// Represents the HTML ``<dfn>`` tag.
public let Definition = Node(name: "dfn")
/// Represents the HTML ``<del>`` tag.
public let DeletedText = Node(name: "del")
/// Represents the HTML ``<dd>`` tag.
public let DescriptionDetails = Node(name: "dd")
/// Represents the HTML ``<dl>`` tag.
public let DescriptionList = Node(name: "dl")
/// Represents the HTML ``<dt>`` tag.
public let DescriptionTerm = Node(name: "dt")
/// Represents the HTML ``<details>`` tag.
public let Details = Node(name: "details")
/// Represents the HTML ``<dialog>`` tag.
public let Dialog = Node(name: "dialog")
/// Represents the HTML ``<div>`` tag.
public let Division = Node(name: "div")
/// Represents the HTML ``<embed>`` tag.
public let Embed = Node(name: "embed", isEmpty: true)
/// Represents the HTML ``<em>`` tag.
public let Emphasis = Node(name: "em")
/// Represents the HTML ``<fieldset>`` tag.
public let FieldSet = Node(name: "fieldset")
/// Represents the HTML ``<figure>`` tag.
public let Figure = Node(name: "figure")
/// Represents the HTML ``<figcaption>`` tag.
public let FigureCaption = Node(name: "figcaption")
/// Represents the HTML ``<footer>`` tag.
public let Footer = Node(name: "footer")
/// Represents the HTML ``<form>`` tag.
public let Form = Node(name: "form")
/// Represents the HTML ``<html>`` tag.
public let Root = Node(name: "html")
/// Represents the HTML ``<head>`` tag.
public let Head = Node(name: "head")
/// Represents the HTML ``<header>`` tag.
public let Header = Node(name: "header")
/// Represents the HTML ``<h1>`` tag.
public let Heading1 = Node(name: "h1")
/// Represents the HTML ``<h2>`` tag.
public let Heading2 = Node(name: "h2")
/// Represents the HTML ``<h3>`` tag.
public let Heading3 = Node(name: "h3")
/// Represents the HTML ``<h4>`` tag.
public let Heading4 = Node(name: "h4")
/// Represents the HTML ``<h5>`` tag.
public let Heading5 = Node(name: "h5")
/// Represents the HTML ``<h6>`` tag.
public let Heading6 = Node(name: "h6")
/// Represents the HTML ``<hr>`` tag.
public let HorizontalRule = Node(name: "hr", isEmpty: true)
/// Represents the HTML ``<iframe>`` tag.
public let IFrame = Node(name: "iframe")
/// Represents the HTML ``<i>`` tag.
public let IdiomaticText = Node(name: "i")
/// Represents the HTML ``<img>`` tag.
public let Image = Node(name: "img", isEmpty: true)
/// Represents the HTML ``<code>`` tag.
public let InlineCode = Node(name: "code")
/// Represents the HTML ``<input>`` tag.
public let Input = Node(name: "input", isEmpty: true)
/// Represents the HTML ``<ins>`` tag.
public let Ins = Node(name: "ins")
/// Represents the HTML ``<kbd>`` tag.
public let KeyboardIput = Node(name: "kbd")
/// Represents the HTML ``<label>`` tag.
public let Label = Node(name: "label")
/// Represents the HTML ``<legend>`` tag.
public let Legend = Node(name: "legend")
/// Represents the HTML ``<link>`` tag.
public let Link = Node(name: "link", isEmpty: true)
/// Represents the HTML ``<li>`` tag.
public let ListItem = Node(name: "li")
/// Represents the HTML ``<main>`` tag.
public let Main = Node(name: "main")
/// Represents the HTML ``<map>`` tag.
public let Map = Node(name: "map")
/// Represents the HTML ``<mark>`` tag.
public let Mark = Node(name: "mark")
/// Represents the HTML ``<meta>`` tag.
public let Metadata = Node(name: "meta", isEmpty: true)
/// Represents the HTML ``<meter>`` tag.
public let Meter = Node(name: "meter")
/// Represents the HTML ``<nav>`` tag.
public let Navigation = Node(name: "nav")
/// Represents the HTML ``<noscript>`` tag.
public let NoScript = Node(name: "noscript")
/// Represents the HTML ``<object>`` tag.
public let Object = Node(name: "object")
/// Represents the HTML ``<option>`` tag.
public let Option = Node(name: "option")
/// Represents the HTML ``<optgroup>`` tag.
public let OptionGroup = Node(name: "optgroup")
/// Represents the HTML ``<ol>`` tag.
public let OrderedList = Node(name: "ol")
/// Represents the HTML ``<output>`` tag.
public let Output = Node(name: "output")
/// Represents the HTML ``<p>`` tag.
public let Paragraph = Node(name: "p")
/// Represents the HTML ``<param>`` tag.
public let Parameter = Node(name: "param", isEmpty: true)
/// Represents the HTML ``<picture>`` tag.
public let Picture = Node(name: "picture")
/// Represents the HTML ``<pre>`` tag.
public let PreformattedText = Node(name: "pre")
/// Represents the HTML ``<progress>`` tag.
public let Progress = Node(name: "progress")
/// Represents the HTML ``<q>`` tag.
public let Quotation = Node(name: "q")
/// Represents the HTML ``<ruby>`` tag.
public let Ruby = Node(name: "ruby")
/// Represents the HTML ``<rp>`` tag.
public let RubyParenthesis = Node(name: "rp")
/// Represents the HTML ``<rt>`` tag.
public let RubyText = Node(name: "rt")
/// Represents the HTML ``<samp>`` tag.
public let SampleOutput = Node(name: "samp")
/// Represents the HTML ``<script>`` tag.
public let Script = Node(name: "script")
/// Represents the HTML ``<section>`` tag.
public let Section = Node(name: "section")
/// Represents the HTML ``<select>`` tag.
public let Select = Node(name: "select")
/// Represents the HTML ``<small>`` tag.
public let Small = Node(name: "small")
/// Represents the HTML ``<source>`` tag.
public let Source = Node(name: "source", isEmpty: true)
/// Represents the HTML ``<span>`` tag.
public let Span = Node(name: "span")
/// Represents the HTML ``<strong>`` tag.
public let Strong = Node(name: "strong")
/// Represents the HTML ``<style>`` tag.
public let Style = Node(name: "style")
/// Represents the HTML ``<sub>`` tag.
public let Subscript = Node(name: "sub")
/// Represents the HTML ``<summary>`` tag.
public let Summary = Node(name: "summary")
/// Represents the HTML ``<sup>`` tag.
public let Superscript = Node(name: "sup")
/// Represents the HTML ``<table>`` tag.
public let Table = Node(name: "table")
/// Represents the HTML ``<tbody>`` tag.
public let TableBody = Node(name: "tbody")
/// Represents the HTML ``<th>`` tag.
public let TableCellHeader = Node(name: "th")
/// Represents the HTML ``<td>`` tag.
public let TableData = Node(name: "td")
/// Represents the HTML ``<tfoot>`` tag.
public let TableFooter = Node(name: "tfoot")
/// Represents the HTML ``<thead>`` tag.
public let TableHeader = Node(name: "thead")
/// Represents the HTML ``<tr>`` tag.
public let TableRow = Node(name: "tr")
/// Represents the HTML ``<template>`` tag.
public let Template = Node(name: "template")
/// Represents the HTML ``<textarea>`` tag.
public let TextArea = Node(name: "textarea")
/// Represents the HTML ``<time>`` tag.
public let Time = Node(name: "time")
/// Represents the HTML ``<title>`` tag.
public let Title = Node(name: "title")
/// Represents the HTML ``<track>`` tag.
public let Track = Node(name: "track", isEmpty: true)
/// Represents the HTML ``<ul>`` tag.
public let UnorderedList = Node(name: "ul")
/// Represents the HTML ``<var>`` tag.
public let Variable = Node(name: "var")
/// Represents the HTML ``<video>`` tag.
public let Video = Node(name: "video")
/// Represents the HTML ``<wbr>`` tag.
public let WordBreak = Node(name: "wbr", isEmpty: true)
